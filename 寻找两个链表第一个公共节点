--------------------------------
我一开始想着是遍历两个链表长度，
然后看到可以用数学方法解决，其实
我个人感觉没啥差别，第二种还比较
难以理解，下面附上代码和思路
--------------------------------
/*
struct ListNode {
	int val;
	struct ListNode *next;
	ListNode(int x) :
			val(x), next(NULL) {
	}
};*/
class Solution {
public:
    ListNode* FindFirstCommonNode( ListNode* pHead1, ListNode* pHead2) {
        ListNode* p1=pHead1;
        ListNode* p2=pHead2;
        int length1=0;
        int length2=0;
        while(p1!=NULL)
        {
            length1++;
            p1=p1->next;
        }
        while(p2!=NULL)
        {
            length2++;
            p2=p2->next;
        }
        p1=pHead1;
        p2=pHead2;
        if(length1>length2)
        {
            int cnt=0;
            while(cnt<(length1-length2))
            {
                p1=p1->next;
                cnt++;
            }
        }
        else{
            int cnt=0;
            while(cnt<(length2-length1))
            {
                p2=p2->next;
                cnt++;
            }
        }
        while(p1!=p2)
        {
            p1=p1->next;
            p2=p2->next;
        }
        return p1;     
        }
};


----------------------------
class Solution {
public:
   ListNode* FindFirstCommonNode(ListNode* pHead1, ListNode* pHead2) {
       /*
        假定 List1长度: a+n  List2 长度:b+n, 且 a<b
        那么 p1 会先到链表尾部, 这时p2 走到 a+n位置,将p1换成List2头部
        接着p2 再走b+n-(n+a) =b-a 步到链表尾部,这时p1也走到List2的b-a位置，还差a步就到可能的第一个公共节点。
        将p2 换成 List1头部，p2走a步也到可能的第一个公共节点。如果恰好p1==p2,那么p1就是第一个公共节点。  或者p1和p2一起走n步到达列表尾部，二者没有公共节点，退出循环。 同理a>=b.
        时间复杂度O(n+a+b)
         
       */
        ListNode* p1 = pHead1;
        ListNode* p2 = pHead2;
        while(p1 != p2) {
            if(p1 != NULL) p1 = p1->next;   
            if(p2 != NULL) p2 = p2->next;
            if(p1 != p2) {                  
                if(p1 == NULL) p1 = pHead2;
                if(p2 == NULL) p2 = pHead1;
            }
        }
        return p1;
     
}
        
};
